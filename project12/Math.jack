// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
static Array power;
static Array sqrtArr;

    /** Initializes the library. */
    function void init() {
    var int i;
    var int j;
    var int pow;
    let power = Array.new(16); // 1,2,4,8,16,32...
    let sqrtArr = Array.new(182); //1,4,9,16,25.. 16=9+4+4-1, 9 = 4+3+3-1, 4 = 1+2+2-1
    let i = 0;
    let j = 1;
    let sqrtArr[0] = 0;
    let pow = 1;
    while(i<16){
        let power[i]=pow;
        let pow = pow+pow;
        let i = i+1;
    }
    while (j<182){ //
        let sqrtArr[j] = sqrtArr[j-1]+(j+j)-1;
        let j = j+1;
    }
    return;
    }


    /** Returns the absolute value of x. */
    function int abs(int x) {
    if (x<0){
        let x =-x;
        }
    return x;
    }


    function boolean bit(int x, int y){
    if ((power[y]&x)>0){
        return true;
    }
    return false;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    var int j;
    var int sum;
    var int shift;
    var int absy;
    let absy = Math.abs(y);
    let j = 0;
    let sum = 0;
    let shift = Math.abs(x);
    if ((x=0)|(y=0)){
    return 0;}
    while(j<16){ // better then a loop with a length of one of the variable (x or y)
        if (Math.bit(absy,j)){
        let sum = sum+shift;
        }
     let shift = shift+shift;
     let j=j+1;
     }
     if ((x>0 &y<0)| (x<0&y>0)){ // case of -
     return -sum;}
     return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) { // same idea as division in earlier exercises
    var int absx;
    var int absy;
    var int result;
    let absx = Math.abs(x);
    let absy =Math.abs(y);
    if (absy>absx){
        return 0;}
    let result = Math.divideHelper(absx,absy);
    if ((x>0 &y<0)| (x<0&y>0)){
     return -result;}
    return result;
    }

    /**

    */
    function int divideHelper(int x, int y){
    var int res;
    if (y>x){
        return 0;}
    let res = Math.divideHelper(x,(y+y));
    if (x-Math.multiply((res+res),y) < y){
        return (res+res);}
    return (res+res+1);
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    var int l;
    var int m;
    var int h;
    if (x=0){
        return 0;}
    let l = 0;
    let h = 181;
    while(l<h){ // finding approximation for the square root
        let m = Math.divide((l+h),2);
        if (sqrtArr[m]>x){
            let h = m-1;
        }
        else{
            if (sqrtArr[m]<x){
                let l = m+1;
             }
             else{
                return m;
                }
            }
        }
        if (~(l=0) &sqrtArr[l]>x){
            return l-1;
        }
        return l;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    if (a>b){
        return a;
        }
    else{
        return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    if (a<b){
        return a;
        }
    else {
        return b;
        }
    }
}
