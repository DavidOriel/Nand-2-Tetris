// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int base ,max;
    static int length;
    static int next;
    static int endList;

    /** Initializes the class. */
    function void init() {
    let memory = 0;
    let base = 2048;
    let max = 16384;
    let length = base;
    let next = base+1;
    let endList = -1;
    let memory[length] = max-base;
    let memory[next] = endList;
    return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
    var int current;
    var int prev;
    var int next1;
    var int address;
    let prev = length;
    let current = length;
    let next1 = next;
    let address = -1;
    while (~(memory[current]>size)& ~(memory[next] = endList)){
        let prev = current;
        let current = memory[next1];
        let next1 = memory[next+1];
            }
    if (~(next1 = endList)){
        if (current <(size+3)){
            let memory[prev +1] = memory[current+1];
            let memory[current] = size+1;
            let address = current+1;}
     else{
        let memory[current] = memory[current]-size-1;
        let address = current +memory[current];
        let memory[address -1] = size+1;
           }
       }
       return address;
    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let memory[o] = memory[o-1];
        let memory[o+1] = memory[length+1];
        let memory[length+1] = o;
        return;
    }    
}
