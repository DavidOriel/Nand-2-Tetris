/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
	 ALU(x = x, y = y, zx = instruction[5], nx = instruction[4], zy= instruction[3], ny = instruction[2],
	 f = instruction[1], no = instruction[0], out = out1);
	 Mul(a = x, b = y, out = outxy);
	 ShiftLeft(in = x, out = slx);
	 ShiftRight(in = x, out = srx);
	 ShiftLeft(in = y, out = sly);
	 ShiftRight(in = y, out = sry);
	 Mux4Way16(a = sry, b = srx, c = sly, d = slx ,sel=instruction[4..5], out = shift);
	 Mux4Way16(a = outxy, b = shift, c = outxy, d = out1, sel= instruction[7..8] ,out = out,out[0..7] = out0,out[8..15] = out3
	 ,out[15]= ng);
	 Or8Way(in = out0, out = o1);
	 Or8Way(in = out3, out = o2);
	 Or(a = o1, b = o2, out = o);
	 Not(in = o, out = zr);
	
	 
        
}
